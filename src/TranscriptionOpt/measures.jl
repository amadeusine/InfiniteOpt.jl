"""
    InfiniteOpt.add_measure_variable(model::JuMP.Model,
                                     var::InfiniteOpt.PointVariable,
                                     key::Val{:TransData}
                                     )::InfiniteOpt.PointVariableRef

Make a `PointVariableRef` and map it to the appropriate transcription variable
and return the `PointVariableRef`. This is an extension of
[`add_measure_variable`](@ref InfiniteOpt.add_measure_variable(::JuMP.Model,::Any,::Any))
for `TranscriptionOpt`.
"""
function InfiniteOpt.add_measure_variable(model::JuMP.Model,
                                          var::InfiniteOpt.PointVariable,
                                          key::Val{:TransData}
                                          )::InfiniteOpt.PointVariableRef
    # make negative index to not conflict with the InfiniteModel
    index = transcription_data(model).next_var_index -= 1
    # make the reference and map it to a transcription variable
    ivref = var.infinite_variable_ref
    pvref = InfiniteOpt.PointVariableRef(JuMP.owner_model(ivref), index)
    _update_point_mapping(model, pvref, ivref, Tuple(var.parameter_values, use_indices = false))
    return pvref
end

"""
    InfiniteOpt.add_measure_variable(model::JuMP.Model,
                                     var::InfiniteOpt.ReducedInfiniteInfo,
                                     key::Val{:TransData}
                                     )::InfiniteOpt.ReducedInfiniteVariableRef

Make a `ReducedInfiniteVariableRef` and add `var` to the trascription data
and return the `ReducedInfiniteVariableRef`. This is an extension of
[`add_measure_variable`](@ref InfiniteOpt.add_measure_variable(::JuMP.Model,::Any,::Any))
for `TranscriptionOpt`. Note that `reduction_info` is also extended to be able
to access the `var`.
"""
function InfiniteOpt.add_measure_variable(model::JuMP.Model,
                                          var::InfiniteOpt.ReducedInfiniteInfo,
                                          key::Val{:TransData}
                                          )::InfiniteOpt.ReducedInfiniteVariableRef
    # Use the builtin transcription model to instead store the variables --> needed for reduction_info
    # TODO replace this hack with a mapping function similar to point variables
    ivref = var.infinite_variable_ref
    model = optimizer_model(JuMP.owner_model(ivref))
    # make negative index to not conflict with the InfiniteModel
    index = transcription_data(model).next_var_index -= 1
    # make the reference and map it to a transcription variable
    rvref = InfiniteOpt.ReducedInfiniteVariableRef(JuMP.owner_model(ivref), index)
    transcription_data(model).reduced_info[index] = var
    return rvref
end

"""
    InfiniteOpt.reduction_info(vref::InfiniteOpt.ReducedInfiniteVariableRef,
                               key::Val{:TransData}
                               )::InfiniteOpt.ReducedInfiniteInfo

Return the `ReducedInfiniteInfo` in connection with `vref` that was added via
`add_measure_variable`. This is an extension of
[`reduction_info`](@ref InfiniteOpt.reduction_info(::InfiniteOpt.ReducedInfiniteVariableRef, ::Any)).
"""
function InfiniteOpt.reduction_info(vref::InfiniteOpt.ReducedInfiniteVariableRef,
                                    key::Val{:TransData}
                                    )::InfiniteOpt.ReducedInfiniteInfo
    model = InfiniteOpt.optimizer_model(JuMP.owner_model(vref))
    return transcription_data(model).reduced_info[JuMP.index(vref)]
end

"""
    InfiniteOpt.delete_reduced_variable(model::JuMP.Model,
                                        vref::InfiniteOpt.ReducedInfiniteVariableRef,
                                        key::Val{:TransData})

Delete the reduced variable associated with `vref` from the optimizer model
`model` if it was generated by `add_measure_variable`. This is an extension of
[`delete_reduced_variable`](@ref InfiniteOpt.delete_reduced_variable(::JuMP.Model, ::Any, ::Any))
for use in `TranscriptionOpt`.
"""
function InfiniteOpt.delete_reduced_variable(model::JuMP.Model,
                                             rvref::InfiniteOpt.ReducedInfiniteVariableRef,
                                             key::Val{:TransData})
    model = optimizer_model(JuMP.owner_model(rvref)) # TODO replace this in accordance with above hack
    delete!(transcription_data(model).reduced_info, JuMP.index(rvref))
    return
end
